instance_groups:
- name: consul
  jobs:
  - name: consul
    release: consul
  - name: pre-start-script
    release: os-conf
    properties:
      script: &apt_patch |
        #!/bin/bash
        if [ -e /etc/apt/apt.conf.d/cloud-gov ]; then
          echo "cloud.gov dpkg config file already exists!"
        else
          cat > /etc/apt/apt.conf.d/cloud-gov <<EOF
          Dpkg::Options {
            "--force-confdef";
             "--force-confold";
             }
        EOF
        fi
        apt-get update
        apt-get -y remove \
          rsync vim-tiny vim-gui-common python2.7-minimal python3.5-minimal \
          linux-firmware `# USN-4351-1`
        apt-get -y upgrade dbus=1.10.6-1ubuntu3.6
        apt-get -y upgrade intel-microcode=3.20200609.0ubuntu0.16.04.1
        apt-get -y upgrade libc6=2.23-0ubuntu11.2
        apt-get -y upgrade curl=7.47.0-1ubuntu2.18 libcurl3-gnutls=7.47.0-1ubuntu2.18 libcurl3=7.47.0-1ubuntu2.18 libcurl4-openssl-dev=7.47.0-1ubuntu2.18 `# USN-4665-1`
        apt-get -y upgrade libdbus-1-3=1.10.6-1ubuntu3.6
        apt-get -y upgrade vim=2:7.4.1689-3ubuntu1.4
        apt-get -y upgrade libarchive13=3.1.2-11ubuntu0.16.04.8
        apt-get -y upgrade libsqlite3-0=3.11.0-1ubuntu1.5 sqlite3=3.11.0-1ubuntu1.5
        apt-get -y upgrade libicu55=55.1-7ubuntu0.5
        apt-get -y upgrade python2.7=2.7.12-1ubuntu0~16.04.12 `# USN-4428-1`
        apt-get -y upgrade python3.5=3.5.2-2ubuntu0~16.04.11 `# USN-4428-1`
        apt-get -y upgrade file=1:5.25-2ubuntu1.4 `# USN-3911-2`
        apt-get -y upgrade libmagic1=1:5.25-2ubuntu1.4 `# USN-3911-2`
        apt-get -y upgrade apt=1.2.32ubuntu0.2 apt-utils=1.2.32ubuntu0.2 libapt-inst2.0=1.2.32ubuntu0.2 libapt-pkg5.0=1.2.32ubuntu0.2 `# USN-4667-1`
        apt-get -y upgrade python3-software-properties=0.96.20.10 `# USN-4457-1`
        apt-get -y upgrade software-properties-common=0.96.20.10  `# USN-4457-1`
        apt-get -y upgrade libssl-dev=1.0.2g-1ubuntu4.17 `# USN-4504-1`
        apt-get -y upgrade libssl1.0.0=1.0.2g-1ubuntu4.18 `# USN-4662-1`
        apt-get -y upgrade openssl=1.0.2g-1ubuntu4.17 `# USN-4504-1`
        apt-get -y upgrade slapd=2.4.42+dfsg-2ubuntu3.11 `# USN-4622-1 and USN 4634-1`
        apt-get -y upgrade python-apt-common=1.1.0~beta1ubuntu0.16.04.11 python3-apt=1.1.0~beta1ubuntu0.16.04.11 `# USN-4668-1`
        apt-get -y upgrade unzip=6.0-20ubuntu1.1 `# USN-4672-1`
        apt-get -y upgrade libp11-kit0=0.23.2-5~ubuntu16.04.2 `# USN-4677-1`
        /lib/systemd/systemd-sysv-install disable rsync `# rsync needs to be disabled even though it was removed.`
        #Script to mitigate CVE-2020-11935 from CG222
        minute=$(expr $RANDOM % 60)
        hour=$(expr $RANDOM % 8)
        cat > /etc/cron.d/k8s-flush.sh <<EOF
        #!/bin/bash
        echo 2 | sudo tee /proc/sys/vm/drop_caches
        EOF
        chmod 0700 /etc/cron.d/k8s-flush.sh
        chown "root:" /etc/cron.d/k8s-flush.sh
        ! (cat /etc/crontab | grep -q "k8s-flush.sh") && (echo "$minute $hour * * * root /etc/cron.d/k8s-flush.sh" >> /etc/crontab)
        /bin/true
  instances: 3
  vm_type: kubernetes_consul
  disk_type: kubernetes
  stemcell: default
  azs: [z1]
  networks:
  - name: services
    static_ips: (( param "specify static ips for consul instances" ))

- name: etcd
  jobs:
  - name: etcd
    release: kubernetes
    properties:
      etcd:
        machines: (( grab instance_groups.etcd.networks.services.static_ips ))
        require_ssl: false
        peer_require_ssl: false
  - name: pre-start-script
    release: os-conf
    properties:
      script: *apt_patch
  instances: 3
  vm_type: kubernetes_etcd
  disk_type: kubernetes
  stemcell: default
  azs: [z1]
  networks:
  - name: services
    static_ips: (( param "specify static ips for etcd instances" ))

- name: master
  jobs:
  - name: docker
    release: kubernetes
  - name: flannel
    release: kubernetes
  - name: kubernetes-minion
    release: kubernetes
    properties:
      manifest-dirs: [/var/vcap/jobs/kubernetes-master/manifests]
      schedulable: false
      apiserver:
        hosts: (( grab instance_groups.master.networks.services.static_ips ))
      cloud-credentials: (( param "specify cloud-credentials" ))
  - name: kubernetes-master
    release: kubernetes
    properties:
      etcd:
        machines: (( grab instance_groups.etcd.networks.services.static_ips ))
      consul:
        join_hosts: (( grab instance_groups.consul.networks.services.static_ips ))
      apiserver:
        hosts: (( grab instance_groups.master.networks.services.static_ips ))
      cloud-credentials: (( param "specify cloud-credentials" ))
      certs:
        ca: (( param "specify CA cert" ))
        kubernetes: (( param "specify kubernetes cert" ))
        kubernetes-key: (( param "specify kubernetes cert key" ))
  - name: pre-start-script
    release: os-conf
    properties:
      script: *apt_patch
  instances: 3
  vm_type: kubernetes_master
  disk_type: kubernetes
  stemcell: default
  azs: [z1]
  networks:
  - name: services
    static_ips: (( param "specify static ips for master instances" ))

- name: minion
  jobs:
  - name: docker
    release: kubernetes
  - name: flannel
    release: kubernetes
  - name: kubernetes-minion
    release: kubernetes
    properties:
      schedulable: true
      apiserver:
        hosts: (( grab instance_groups.master.networks.services.static_ips ))
      cloud-credentials: (( param "specify cloud-credentials" ))
  - name: pre-start-script
    release: os-conf
    properties:
      script: *apt_patch
  instances: 3
  vm_type: kubernetes_minion
  disk_type: kubernetes
  stemcell: default
  azs: [z1]
  networks:
  - name: services
    static_ips: (( param "specify static ips for minion instances" ))

- name: create-kubernetes-dns
  lifecycle: errand
  jobs:
  - name: create-kubernetes-dns
    release: kubernetes
    properties:
      apiserver:
        host: (( grab instance_groups.master.networks.services.static_ips.[0] ))
  instances: 1
  vm_type: errand_small
  stemcell: default
  azs: [z1]
  networks:
  - name: services

- name: create-kubernetes-monitoring
  lifecycle: errand
  jobs:
  - name: create-kubernetes-monitoring
    release: kubernetes
    properties:
      nodes: (( grab instance_groups.master.networks.services.static_ips instance_groups.minion.networks.services.static_ips ))
      apiserver:
        host: (( grab instance_groups.master.networks.services.static_ips.[0] ))
  instances: 1
  vm_type: errand_small
  stemcell: default
  azs: [z1]
  networks:
  - name: services

- name: apply-kubernetes-manifests
  lifecycle: errand
  jobs:
  - name: apply-kubernetes-manifests
    release: kubernetes
    properties:
      apiserver:
        host: (( grab instance_groups.master.networks.services.static_ips.[0] ))
  instances: 1
  vm_type: errand_small
  stemcell: default
  azs: [z1]
  networks:
  - name: services
